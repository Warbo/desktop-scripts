#!/usr/bin/env bash
set -e

function fail {
    echo -e "$*" 1>&2
    exit 1
}

[[ "$#" -eq 1 ]] || fail "Need a benchmark name as arg"

function run {
    FOUND=0
    for BENCHMARK in isaplanner-cutoff
    do
        [[ "x$1" -eq "x$BENCHMARK" ]] || continue

        FOUND=1
        [[ "$DRYRUN" -eq 0 ]] || continue

        case "$BENCHMARK" in
            isaplanner-cutoff)
                (cd benchmarking/isaplanner-tip;
                 F=$(nix-build --show-trace -E \
                     'with import ./. {}; defs.sampling.find-cutoff-time') ||
                     fail "Failed to build find-cutoff-time script"
                 "$F" 1> cutoff.stdout 2> cutoff.stderr);;
        esac
    done
    [[ "$FOUND" -eq 1 ]] || fail "Benchmark $1 not found"
}

export DRYRUN=1
run
export DRYRUN=0

BASE=$(dirname "$(readlink -f "$0")")

cd "$HOME"

# Requires sudo, so user will be prompted for their password
echo "Shutting down Hydra" 1>&2
"$BASE/stop-hydra.sh"

# We want Hydra to come back up after, so that updates get built, etc. However,
# that's a little tricky since it requires sudo, and the user probably isn't sat
# in front of the terminal after several hours of benchmarking.

# To solve this, we use the file DONE to indicate that the benchmarking has
# finished and Hydra can be started.
rm -f DONE

# Use the sudo privileges we currently have to start a loop which checks whether
# DONE exists yet, and restart Hydra if so.
sudo sh -c "while [ ! -f DONE ]; do sleep 60; done; \"$BASE/start-hydra.sh\"" &

# Force the loop to stop itself if we die
function cleanup {
    touch DONE
}
trap cleanup EXIT

# Do the actual benchmarking
run

# Start Hydra again
touch DONE
